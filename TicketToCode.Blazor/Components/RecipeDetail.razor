@page "/recipe/{id:int}"
@inject HttpClient Http
@inject TicketToCode.Core.Services.ShoppingListService ShoppingListService
@inject TicketToCode.Core.Services.FrontendAuthService FrontendAuthService
@inject TicketToCode.Core.Services.FavoriteService FavoriteService
@using System.Text.RegularExpressions
@using TicketToCode.Core.Models
@using TicketToCode.Core.Enums
@using TicketToCode.Core.Services


@if (recipe == null)
{
<PageTitle>Recipe Detail</PageTitle>
	<p>Loading...</p>
}
else
{
	<PageTitle>@recipe.Name</PageTitle>


	<div>

		@if (ShowName)
		{
			<h1>@recipe.Name</h1>
		}

		@if (ShowDescription)
		{
			<p>@recipe.Description</p>
		}

		@if (ShowFavoriteButton && isLoggedIn)
		{
			<button class="favorite-button" @onclick="ToggleFavorite">@buttonText</button>
		}
		@if (ShowIngredients || ShowInstructions)
		{
			<div class="recipe-details-section">
				@if (ShowIngredients)
				{
					<div class="recipe-ingredients-wrapper">
						<div class="section-header">
							<h3>Ingredients</h3>
						</div>
						<div class="recipe-ingredients">
							<ul>
								@foreach (var ingredient in recipe.Ingredients)
								{
									<li class="ingredient-element">
										<span class="keep-left">
											@ingredient.Quantity @ingredient.MeasurementUnit @ingredient.IngredientName
										</span>
										@if (isLoggedIn)
										{
											<span>
												<button class="add-one-button" @onclick="() => AddIngredientToShoppingList(ingredient)">Add to shopping list</button>
											</span>
										}
									</li>
								}
							</ul>
						</div>
					</div>
					<div class="added-message-container">
						@if (showMessageAlert)
						{
							<span class="added-message">@allAddedMessage</span>
						}
					</div>
					@if (isLoggedIn)
					{
						<div class="add-all-wrapper">
							<button @onclick="AddAllIngredientsToShoppingList" class="add-all-ingredients-button">Add all ingredients to shopping list</button>
						</div>
					}
				}
				@if (ShowInstructions)
				{
					<div class="recipe-instructions-wrapper">
						<div class="section-header">
							<h3>Instructions</h3>
						</div>
						<div class="recipe-instructions">
							<ol>
								@foreach (var instruction in Instructions)
								{
									<li>@instruction</li>
								}
							</ol>
						</div>
					</div>
				}
			</div>
		}
		@if (ShowCategory)
		{
			<p><strong>Category:</strong> @Category[0]</p>
		}
	</div>
}

@code {
	[Parameter]
	public int Id { get; set; }

	[Parameter]
	public bool ShowName { get; set; } = true;

	[Parameter]
	public bool ShowDescription { get; set; } = true;

	[Parameter]
	public bool ShowIngredients { get; set; } = true;

	[Parameter]
	public bool ShowInstructions { get; set; } = true;

	[Parameter]
	public bool ShowCategory { get; set; } = true;

	[Parameter]
	public bool ShowFavoriteButton { get; set; } = true;

	private string buttonText { get; set; } = string.Empty;
	private bool isFavorite { get; set; } = false;
	private bool isLoggedIn { get; set; } = false;
	private bool showMessageAlert { get; set; } = false;

	private FrontendAuthService.UserProfile? profile;

	private RecipeResponse? recipe;

	private RecipeIngredientResponse? addedIngredient;
	private string? allAddedMessage;

	private string pattern = @"\d[.]";

	private string[]? Instructions;

	private string[]? Category;

	protected override async Task OnInitializedAsync()
	{
		recipe = await Http.GetFromJsonAsync<RecipeResponse>($"https://localhost:5001/Recipes/{Id}");

		try
		{
			profile = await FrontendAuthService.GetUserProfile();
		}
		catch
		{
			profile = null;
		}

		if (profile is not null)
		{
			isLoggedIn = true;
			isFavorite = await FavoriteService.IsRecipeFavoriteAsync(Id);
			buttonText = isFavorite ? "Remove from faves" : "Add to faves";
		}
		else
		{
			isLoggedIn = false;
		}

		// Separate instructions :)
		Instructions = Regex.Split(recipe.Instructions, pattern);
		Instructions = Instructions.Skip(1).ToArray();

		Category = recipe.CategoryDescription.Split(':');

	}

	private async Task ToggleFavorite()
	{
		await FavoriteService.ToggleFavoriteAsync(Id);
		isFavorite = await FavoriteService.IsRecipeFavoriteAsync(Id);
		buttonText = isFavorite ? "Remove from faves" : "Add to faves";
	}

	private async Task AddIngredientToShoppingList(RecipeIngredientResponse ingredient)
	{
		if (Enum.TryParse<MeasurementUnit>(ingredient.MeasurementUnit, out var measurementUnit))
		{
			var newIngredient = new RecipeIngredient
				{
					Ingredient = new Ingredient
					{
						Name = ingredient.IngredientName,
						Unit = measurementUnit,
					},
					Quantity = ingredient.Quantity
				};
			ShoppingListService.AddToShoppingList(newIngredient);

			addedIngredient = ingredient;
			await ShowMessage($"{newIngredient.Ingredient.Name} has been added to your shopping list!");
		}
		else
		{
			Console.WriteLine($"Failed to parse MeasurementUnit for ingredient: {ingredient.IngredientName}"); // Debug statement
		}
	}

	private async Task AddAllIngredientsToShoppingList()
	{
		foreach (var ingredient in recipe.Ingredients)
		{
			AddIngredientToShoppingList(ingredient);
		}

		await ShowMessage("All ingredients have been added to your shopping list!");
	}





	// Function to set the message
	private async Task ShowMessage(string message)
	{
		showMessageAlert = true;
		allAddedMessage = message;
		await Task.Delay(2000);
		showMessageAlert = false;
		StateHasChanged();
	}

	public class RecipeResponse
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public List<RecipeIngredientResponse> Ingredients { get; set; }
		public string Instructions { get; set; }
		public string CategoryDescription { get; set; }
	}

	public class RecipeIngredientResponse
	{
		public string IngredientName { get; set; }
		public string IngredientType { get; set; }
		public double Quantity { get; set; }
		public string MeasurementUnit { get; set; }
	}
}
