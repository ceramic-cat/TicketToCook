@using TicketToCode.Core.Services

@inject TicketToCode.Core.Services.NavState NavState
@inject FrontendAuthService AuthService
@inject NavigationManager Navigation

<div class="navbar">
	<p class="nav-title">Ticket To Cook</p>
	<button class="navmenubutton" @onclick="ToggleNavMenu">Menu</button>

	<div class="nav-container">
		<div class="@NavMenuCssClass navmenu" @onclick="CloseNavMenu">
			@if (NavState.IsLoggedIn)
			{

				<NavLink class="nav-link" href="/" @onclick="() => NavState.SetViewingAccount(false)">Home</NavLink>
				<NavLink class="nav-link" href="recipes">Recipes</NavLink>
				<NavLink class="nav-link" href="myaccount">Profile</NavLink>
				<NavLink class="nav-link" href="favorites">Favorites</NavLink>
				<NavLink class="nav-link" href="shoppinglist">Shopping List</NavLink>
				<NavLink class="nav-link" href="/" @onclick="HandleLogout">Logout</NavLink>

			}
			else
			{
				<NavLink class="nav-link" href="/">Home</NavLink>
				<NavLink class="nav-link" href="recipes">Recipes</NavLink>
				<NavLink class="nav-link" href="login">Login</NavLink>
			}
		</div>
	</div>
</div>

@code {
	private bool collapseNavMenu = true;

	private string? NavMenuCssClass => collapseNavMenu ? "collapsed" : "expanded";

	protected override void OnInitialized()
	{
		NavState.OnChange += StateHasChanged;
	}

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private void CloseNavMenu()
	{
		collapseNavMenu = true;
	}

	public void Dispose()
	{
		NavState.OnChange -= StateHasChanged;
	}


	private async Task HandleLogout()
	{
		await AuthService.Logout();
		NavState.SetLoggedIn(false);
		NavState.SetViewingAccount(false);
		Navigation.NavigateTo("/", true);
	}



}