@page "/login"
@inject HttpClient Http
@inject NavigationManager Nav
<h2>Login</h2>
<head>
    <style>
        button, .nav-item {
        background-color: black;
        color: white;
        text-decoration: none;
        padding: 10px 15px;
        border-radius: 15px;
        display: inline-block;
        }
    </style>
</head>
<div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }

</div>

<form @onsubmit="UserLogin">
    <input type="text" @bind="Username" placeholder="Username" />
    <input type="password" @bind="Password" placeholder="Password" />
    <button type="submit">Log in</button>
    <p>@successMessage</p>
</form>

<div style="padding-top:40px">
    <p>If you don't have an account already, register here </p>
    <NavLink class="nav-item" href="register">Register</NavLink>
</div>
@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string? errorMessage;
    private string? successMessage;

    private async Task UserLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/auth/login", new { Username, Password });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Response>();
                successMessage = $"Welcome {result.Username}";
                errorMessage = null;
                await Task.Delay(1000);
                Nav.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password.";
                successMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    public record Response(string Username, string Role);
}