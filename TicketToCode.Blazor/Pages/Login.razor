@page "/login"
@inject HttpClient Http
@inject NavigationManager Nav
@inject TicketToCode.Core.Services.NavState NavState
@* <h2>Login</h2> *@
<head>
	<style>
		.reg-container {
			max-width: 500px;
			margin: 1rem auto 1rem;
			padding: 1.5rem;
			background-color: #f0e6d2;
			border-radius: 8px;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
		}

		.reg-label {
			display: block;
			margin-bottom: 1rem;
			text-align: left;
			padding-left: 1.5rem;
		}

		.nav-link-wrapper {
			margin-bottom: 1.5rem;
			margin-left: 0.5rem;
			margin-right: 2rem;
			display: block;
		}

		/* NavLink to Registration */
		.nav-item {
			display: block;
			width: 100%;
			padding: 0.75rem;
			background-color: black;
			color: white;
			border: none;
			border-radius: 4px;
			font-size: 1rem;
			font-weight: 600;
			cursor: pointer;
			transition: all 0.3s ease;
			text-decoration: none;
			text-align: center;
			margin-right: 10px;
		}

			.nav-item:hover {
				background-color: #d1bf8f;
				color: black;
			}

	</style>
</head>
<div>
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<p class="error-message">@errorMessage</p>
	}

</div>
<div>
	<form @onsubmit="UserLogin">
		<div class="login-container">
			<h2 class="login-title">Account Login</h2>

			<div class="form-row">
				<div class="form-group">
					<label for="username">Username</label>
					<input name="username" type="text" @bind="Username" placeholder="Enter your username" required />
				</div>

				<div class="form-group">
					<label for="password">Password</label>
					<input name="password" type="password" @bind="Password" placeholder="Enter your password" required />
				</div>
			</div>

			<div class="form-group">
				<button type="submit" class="btn-submit">Log in</button>
			</div>

		</div>
	</form>

	<div class="reg-container">
		<p class="reg-label">If you don't have an account already, register here</p>
		<div class="nav-link-wrapper">
			<NavLink class="nav-item" href="register">Register</NavLink>
		</div>
	</div>

</div>


@code {
	private string Username { get; set; } = "";
	private string Password { get; set; } = "";
	private string? errorMessage;


	private async Task UserLogin()
	{
		try
		{
			var response = await Http.PostAsJsonAsync("/auth/login", new { Username, Password });

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<Response>();
				// successMessage = $"Welcome {result.Username}";
				 errorMessage = null;
                NavState.SetLoggedIn(true);
				NavState.SetViewingAccount(false);
                await Task.Delay(1000);
                Nav.NavigateTo("/");
			}
			else
			{
				errorMessage = "Invalid username or password.";
				// successMessage = null;
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error: {ex.Message}";
		}
	}

	public record Response(string Username, string Role);
}