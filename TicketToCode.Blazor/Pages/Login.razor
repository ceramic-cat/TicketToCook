@page "/login"
@using System.ComponentModel.DataAnnotations
@using TicketToCode.Core.Services
@inject FrontendAuthService FrontendAuthService
@inject NavigationManager Nav
@inject TicketToCode.Core.Services.NavState NavState
@* <h2>Login</h2> *@

<head>
</head>
<div>
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<p class="error-message">@errorMessage</p>
	}
</div>
<div>
	<form @onsubmit="UserLogin">
		<div class="login-container">
			<h2 class="login-title">Account Login</h2>

			<div class="form-row">
				<div class="form-group">
					<label for="username">Username</label>
					<input name="username" type="text" @bind-value="loginModel.Username"
						placeholder="Enter your username" required />
				</div>

				<div class="form-group">
					<label for="password">Password</label>
					<input name="password" type="password" @bind-value="loginModel.Password"
						placeholder="Enter your password" required />
				</div>
			</div>

			<div class="form-group">
				<button type="submit" class="btn-submit">Log in</button>
			</div>

		</div>
	</form>

	<div class="reg-container">
		<p class="reg-label">If you don't have an account already, register here</p>
		<div class="nav-link-wrapper">
			<NavLink class="nav-item" href="register">Register</NavLink>
		</div>
	</div>

</div>


<!-- Modal for login success -->
@if (showLoginSuccessModal)
{
	<div class="modal-overlay">
		<div class="modal">
			<h3>You are now logged in!</h3>
		</div>
	</div>
}



@code {
	// private string Username { get; set; } = "";
	// private string Password { get; set; } = "";
	private LoginModel loginModel = new();
	private string? errorMessage;
	private bool showLoginSuccessModal = false;

	private async Task UserLogin()
	{
		errorMessage = string.Empty;
		try
		{
			var result = await FrontendAuthService.Login(loginModel.Username, loginModel.Password);

			if (result)
			{
				NavState.SetLoggedIn(true);
				NavState.SetViewingAccount(false);

				showLoginSuccessModal = true;  
				StateHasChanged();  

				// Hide the modal after 2 seconds
				await Task.Delay(2000);
				showLoginSuccessModal = false;

				Nav.NavigateTo("/");

			}
			else
			{
				errorMessage = "Invalid username or password";
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error: {ex.Message}";
		}

	}

	public class LoginModel
	{
		[Required]
		public string Username { get; set; } = string.Empty;

		[Required]
		public string Password { get; set; } = string.Empty;
	}
}